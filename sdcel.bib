%% Fundamentals
@article{muller_finding_1978,
	title = {Finding the intersection of two convex polyhedra},
	volume = {7},
	issn = {0304-3975},
	url = {https://www.sciencedirect.com/science/article/pii/0304397578900518},
	doi = {10.1016/0304-3975(78)90051-8},
	abstract = {Given two convex polyhedra in three-dimensional space, we develop an algorithm to (i) test whether their intersection is empty, and (ii) if so to find a separating plane, while (iii) if not to find a point in the intersection and explicitly construct their intersection polyhedron. The algorithm runs in timeO (n log n), where n is the sum of the numbers of vertices of the two polyhedra. The part of the algorithm concerned with (iii) (constructing the intersection) is based upon the fact that if a point in the intersection is known, then the entire intersection is obtained from the convex hull of suitable geometric duals of the two polyhedra taken with respect to this point.},
	language = {en},
	number = {2},
	urldate = {2021-03-08},
	journal = {Theoretical Computer Science},
	author = {Muller, D. E. and Preparata, F. P.},
	month = jan,
	year = {1978},
	pages = {217--236},
	file = {ScienceDirect Full Text PDF:/home/and/Zotero/storage/V595Q2VC/Muller and Preparata - 1978 - Finding the intersection of two convex polyhedra.pdf:application/pdf;ScienceDirect Snapshot:/home/and/Zotero/storage/H6QL9FRZ/0304397578900518.html:text/html}
}

@book{preparata_computational_1985,
	address = {New York},
	series = {Monographs in {Computer} {Science}},
	title = {Computational {Geometry}: {An} {Introduction}},
	isbn = {978-0-387-96131-6},
	shorttitle = {Computational {Geometry}},
	url = {https://www.springer.com/us/book/9780387961316},
	abstract = {From the reviews: "This book offers a coherent treatment, at the graduate textbook level, of the field that has come to be known in the last decade or so as computational geometry. ... ... The book is well organized and lucidly written; a timely contribution by two founders of the field. It clearly demonstrates that computational geometry in the plane is now a fairly well-understood branch of computer science and mathematics. It also points the way to the solution of the more challenging problems in dimensions higher than two." \#Mathematical Reviews\#1 "... This remarkable book is a comprehensive and systematic study on research results obtained especially in the last ten years. The very clear presentation concentrates on basic ideas, fundamental combinatorial structures, and crucial algorithmic techniques. The plenty of results is clever organized following these guidelines and within the framework of some detailed case studies. A large number of figures and examples also aid the understanding of the material. Therefore, it can be highly recommended as an early graduate text but it should prove also to be essential to researchers and professionals in applied fields of computer-aided design, computer graphics, and robotics." \#Biometrical Journal\#2},
	language = {en},
	urldate = {2021-03-08},
	publisher = {Springer-Verlag},
	author = {Preparata, Franco P. and Shamos, Michael},
	year = {1985},
	doi = {10.1007/978-1-4612-1098-6},
	file = {Snapshot:/home/and/Zotero/storage/SWQWQWTW/9780387961316.html:text/html}
}

@book{berg_computational_2008,
	address = {Berlin Heidelberg},
	edition = {3},
	title = {Computational {Geometry}: {Algorithms} and {Applications}},
	isbn = {978-3-540-77973-5},
	shorttitle = {Computational {Geometry}},
	url = {https://www.springer.com/us/book/9783540779735},
	abstract = {Computational geometry emerged from the ?eld of algorithms design and analysis in the late 1970s. It has grown into a recognized discipline with its own journals, conferences, and a large community of active researchers. The success of the ?eld as a research discipline can on the one hand be explained from the beauty of the problems studied and the solutions obtained, and, on the other hand, by the many application domains—computer graphics, geographic information systems (GIS), robotics, and others—in which geometric algorithms play a fundamental role. For many geometric problems the early algorithmic solutions were either slow or dif?cult to understand and implement. In recent years a number of new algorithmic techniques have been developed that improved and simpli?ed many of the previous approaches. In this textbook we have tried to make these modern algorithmic solutions accessible to a large audience. The book has been written as a textbook for a course in computational geometry, but it can also be used for self-study.},
	language = {en},
	urldate = {2021-03-08},
	publisher = {Springer-Verlag},
	author = {Berg, Mark de and Cheong, Otfried and Kreveld, Marc van and Overmars, Mark},
	year = {2008},
	doi = {10.1007/978-3-540-77974-2},
	file = {Snapshot:/home/and/Zotero/storage/VTA22XWZ/9783540779735.html:text/html}
}

%% Arrangements
@inproceedings{agarwal_arrangements_1998,
	title = {Arrangements and {Their} {Applications}},
	abstract = {The arrangement of a finite collection of geometric objects is the decomposition of the space into connected cells induced by them. We survey combinatorial and algorithmic properties of arrangements of arcs in the plane and of surface patches in higher dimensions. We present many applications of arrangements to problems in motion planning, visualization, range searching, molecular modeling, and geometric optimization. Some results involving planar arrangements of arcs have been presented in a companion chapter in this book, and are extended in this chapter to higher dimensions.   Work by P.A. was supported by Army Research Office MURI grant DAAH04-96-1-0013, by a Sloan fellowship, by an NYI award, and by a grant from the U.S.-Israeli Binational Science Foundation. Work by M.S. was supported by NSF Grants CCR-91-22103 and CCR-93-11127, by a Max-Planck Research Award, and by grants from the U.S.-Israeli Binational Science Foundation, the Israel Science Fund administered by the Israeli Ac...},
	booktitle = {Handbook of {Computational} {Geometry}},
	publisher = {Elsevier Science Publishers B.V. North-Holland},
	author = {Agarwal, Pankaj K. and Sharir, Micha},
	year = {1998},
	pages = {49--119},
	file = {Citeseer - Full Text PDF:/home/and/Zotero/storage/B3D8PAM4/Agarwal and Sharir - 1998 - Arrangements and Their Applications.pdf:application/pdf;Citeseer - Snapshot:/home/and/Zotero/storage/WXEM4BTU/summary.html:text/html}
}

@incollection{halperin-arrangements-2004, 
    author =  "D. Halperin",
    title =   "Arrangements", 
    chapter = 24, 
    editor =  "Jacob E. Goodman and Joseph O'Rourke", 
    booktitle =   "Handbook of Discrete and Computational Geometry", 
    publisher =   "CRC Press LLC", 
    address = "Boca Raton, FL", 
    year =    2004, 
    pages =   "529--562",
    url = {https://www.taylorfrancis.com/chapters/arrangements-dan-halperin-micha-sharir/e/10.1201/9781315119601-28}
} 

%% Sequential techniques
@article{barequet_dcel_1998,
	title = {{DCEL} - {A} {Polyhedral} {Database} and {Programming} {Environment}},
	volume = {08},
	issn = {0218-1959},
	url = {https://www.worldscientific.com/doi/abs/10.1142/S0218195998000308},
	doi = {10.1142/S0218195998000308},
	abstract = {In this paper we describe the DCEL system: a geometric software package which implements a polyhedral programming environment. This package enables fast prototyping of geometric algorithms for polyhedra or for polyhedral surfaces. We provide an overview of the system's functionality and demonstrate its use in several applications.},
	number = {05n06},
	urldate = {2021-03-08},
	journal = {International Journal of Computational Geometry \& Applications},
	author = {Barequet, Gill},
	month = oct,
	year = {1998},
	note = {Publisher: World Scientific Publishing Co.},
	pages = {619--636},
	file = {Snapshot:/home/and/Zotero/storage/FLWPWZI7/S0218195998000308.html:text/html}
}

@inproceedings{boltcheva_topological-based_2020,
	title = {Topological-based roof modeling from {3D} point clouds},
	volume = {28},
	doi = {10.24132/jwscg.2020.28.17},
	abstract = {Automatic extraction of building roofs from remote sensing data is important for many applications including 3D city modeling, urban planning, disaster management, and simulations. In this paper, we propose an automatic workflow for roof reconstruction by polygonal models from classified high-density LIDAR data. Roof planes are initially delineated by a segmentation algorithm combining a robust Hough-based normal estimator and a region growing strategy. Then, each roof is modeled by a 2D α-shape mesh which is used to discover not only building outline but also all ridges defined by intersecting roof planes, without any geometrical calculations. The mesh directly encodes the topological relations between neighboring planes which allows us to build the final polygonal model straightforwardly. This topological approach makes our solution more simple and robust than existing methods which mostly extract the intersection lines by means of geometrical computations. Experimental results show that the proposed workflow offers a high success rate for extraction at plane level (94\% completeness, 92.7\% correctness, 90.8\% quality) when LIDAR point density is sufficiently high.},
	booktitle = {Journal of {WSCG} and {WSCG}},
	publisher = {Journal of {WSCG} and {WSCG}},
	address = {\url{http://wscg.zcu.cz/wscg2020/journal/G53.pdf}},
	author = {Boltcheva, Dobrina and Basselin, Justine and Poull, Clément and Barthélemy, H. and Sokolov, D.},
	year = {2020},
	pages = {137--146},
	file = {Full Text:/home/and/Zotero/storage/VN8CR6NV/Boltcheva et al. - 2020 - Topological-based roof modeling from 3D point clou.pdf:application/pdf}
}

@misc{ freiseisen_colored_1998,
    author = "W. Freiseisen",
    title = "Colored DCEL for boolean operations in 2D",
    text = "Wolfgang Freiseisen. Colored dcel for boolean operations in 2d. Technical
    Report 98--03, RISC, University of Linz, Februar 1998.",
    year = "1998",
    url = "citeseer.nj.nec.com/freiseisen98colored.html" 
}

@misc{holmes_dcel_2021,
	title = {The {DCEL} {Data} {Structure} for {3D} {Graphics}},
	url = {http://www.holmes3d.net/graphics/dcel/},
	urldate = {2021-03-15},
	journal = {The DCEL Data Structure for 3D Graphics},
	author = {Holmes, Ryan},
	year = {2021},
	file = {The DCEL Data Structure for 3D Graphics:/home/and/Zotero/storage/7UQMTM68/dcel.html:text/html}
}

@inproceedings{becker_algorithms_1999,
	address = {Berlin, Heidelberg},
	series = {Lecture {Notes} in {Computer} {Science}},
	title = {Algorithms for {Performing} {Polygonal} {Map} {Overlay} and {Spatial} {Join} on {Massive} {Data} {Sets}},
	isbn = {978-3-540-48482-0},
	doi = {10.1007/3-540-48482-5_17},
	abstract = {We consider the problem of performing polygonal map overlay and the refinement step of spatial overlay joins. We show how to adapt algorithms from computational geometry to solve these problems for massive data sets. A performance study with artificial and real-world data sets helps to identify the algorithm that should be used for given input data.},
	language = {en},
	booktitle = {Advances in {Spatial} {Databases}},
	publisher = {Springer},
	author = {Becker, Ludger and Giesen, André and Hinrichs, Klaus H. and Vahrenhold, Jan},
	editor = {Güting, Ralf Hartmut and Papadias, Dimitris and Lochovsky, Fred},
	year = {1999},
	keywords = {Active Segment, Event Point, Intersection Event, Intersection Point, Priority Queue},
	pages = {270--285},
	file = {Springer Full Text PDF:/home/and/Zotero/storage/H6C4M2SH/Becker et al. - 1999 - Algorithms for Performing Polygonal Map Overlay an.pdf:application/pdf}
}

@article{berberich_arrangements_2010,
	title = {Arrangements on {Parametric} {Surfaces} {II}: {Concretizations} and {Applications}},
	volume = {4},
	issn = {1661-8289},
	shorttitle = {Arrangements on {Parametric} {Surfaces} {II}},
	url = {https://doi.org/10.1007/s11786-010-0043-4},
	doi = {10.1007/s11786-010-0043-4},
	abstract = {We describe the algorithms and implementation details involved in the concretizations of a generic framework that enables exact construction, maintenance, and manipulation of arrangements embedded on certain two-dimensional orientable parametric surfaces in three-dimensional space. The fundamentals of the framework are described in a companion paper. Our work covers arrangements embedded on elliptic quadrics and cyclides induced by intersections with other algebraic surfaces, and a specialized case of arrangements induced by arcs of great circles embedded on the sphere. We also demonstrate how such arrangements can be used to accomplish various geometric tasks efficiently, such as computing the Minkowski sums of polytopes, the envelope of surfaces, and Voronoi diagrams embedded on parametric surfaces. We do not assume general position. Namely, we handle degenerate input, and produce exact results in all cases. Our implementation is realized using Cgal and, in particular, the package that provides the underlying framework. We have conducted experiments on various data sets, and documented the practical efficiency of our approach.},
	language = {en},
	number = {1},
	urldate = {2021-04-23},
	journal = {Mathematics in Computer Science},
	author = {Berberich, Eric and Fogel, Efi and Halperin, Dan and Kerber, Michael and Setter, Ophir},
	month = nov,
	year = {2010},
	pages = {67--91},
	file = {Springer Full Text PDF:/home/and/Zotero/storage/BAK2GQXD/Berberich et al. - 2010 - Arrangements on Parametric Surfaces II Concretiza.pdf:application/pdf}
}

@article{boguslawski_modelling_2011,
	series = {Quality, {Scale} and {Analysis} {Aspects} of {Urban} {City} {Models}},
	title = {Modelling and analysing {3D} buildings with a primal/dual data structure},
	volume = {66},
	issn = {0924-2716},
	url = {https://www.sciencedirect.com/science/article/pii/S092427161000119X},
	doi = {10.1016/j.isprsjprs.2010.11.003},
	abstract = {While CityGML permits us to represent 3D city models, its use for applications where spatial analysis and/or real-time modifications are required is limited since at this moment the possibility to store topological relationships between the elements is rather limited and often not exploited. We present in this paper a new topological data structure, the dual half-edge (DHE), which permits us to represent the topology of 3D buildings (including their interiors) and of the surrounding terrain. It is based on the idea of simultaneously storing a graph in 3D space and its dual graph, and to link the two. We propose Euler-type operators for incrementally constructing 3D models (for adding individual edges, faces and volumes to the model while updating the dual structure simultaneously), and we also propose navigation operators to move from a given point to all the connected planes or polyhedra for example. The DHE also permits us to store attributes to any element. We have implemented the DHE and have tested it with different CityGML models. Our technique allows us to handle important query types, for example finding the nearest exterior exit to a given room, as in disaster management planning. As the structure is locally modifiable the model may be adapted whenever a particular pathway is no longer available. The proposed DHE structure adds significant analytic value to the increasingly popular CityGML model.},
	language = {en},
	number = {2},
	urldate = {2021-04-23},
	journal = {ISPRS Journal of Photogrammetry and Remote Sensing},
	author = {Boguslawski, Pawel and Gold, Christopher M. and Ledoux, Hugo},
	month = mar,
	year = {2011},
	keywords = {3D modelling, Building management, CAD, Data structures, Disaster management},
	pages = {188--197},
	file = {ScienceDirect Snapshot:/home/and/Zotero/storage/6QGK3NZN/S092427161000119X.html:text/html;Submitted Version:/home/and/Zotero/storage/Q9QI7396/Boguslawski et al. - 2011 - Modelling and analysing 3D buildings with a primal.pdf:application/pdf}
}

@article{chew_convex_1993,
	title = {A convex polygon among polygonal obstacles: placement and high-clearance motion},
	volume = {3},
	issn = {0925-7721},
	shorttitle = {A convex polygon among polygonal obstacles},
	url = {https://www.sciencedirect.com/science/article/pii/092577219390001M},
	doi = {10.1016/0925-7721(93)90001-M},
	abstract = {Given a convex polygon P and an environment consisting of polygonal obstacles, we find the placement for the largest similar copy of P that does not intersect any of the obstacles. Allowing translation, rotation, and change-of-size, our method combines a new notion of Delaunay triangulation for points and edges with the well-known functions based on Davenport–Schinzel sequences, producing an almost quadratic algorithm for the problem. Namely, if P is a convex k-gon and if Q has n corners and edges then we can find the placement of the largest similar copy of P in the environment W in time O(k4nλ3(n)logn), where λ3 is one of the almost-linear functions related to Davenport–Schinzel sequences. Based on our complexity analysis of the placement problem, we develop a high-clearance motion planning technique for a convex polygonal object moving among polygonal obstacles in the plane, allowing both rotation and translation (general motion). Given a k-sided convex polygonal object P, a set of polygonal obstacles with n corners and edges, and given initial and final positions for P, the time needed to determine a high-clearance, obstacle-avoiding path for P is O(k4nλ3(n)log n).},
	language = {en},
	number = {2},
	urldate = {2021-04-23},
	journal = {Computational Geometry},
	author = {Chew, L. Paul and Kedem, Klara},
	month = jul,
	year = {1993},
	keywords = {algorithm, convex polygon, Davenport–Schinzel sequences, edge Delaunay triangulation, Edge Voronoi diagram},
	pages = {59--89},
	file = {ScienceDirect Full Text PDF:/home/and/Zotero/storage/3EUN8LIR/Chew and Kedem - 1993 - A convex polygon among polygonal obstacles placem.pdf:application/pdf;ScienceDirect Snapshot:/home/and/Zotero/storage/TERHPA5Z/092577219390001M.html:text/html}
}

@book{orourke_art_1987,
	address = {New York},
	edition = {y First printing edition},
	title = {Art {Gallery} {Theorems} and {Algorithms}},
	isbn = {978-0-19-503965-8},
	abstract = {Art gallery theorems and algorithms are so called because they relate to problems involving the visibility of geometrical shapes and their internal surfaces. This book explores generalizations and specializations in these areas. Among the presentations are recently discovered theorems onorthogonal polygons, polygons with holes, exterior visibility, visibility graphs, and visibility in three dimensions. The author formulates many open problems and offers several conjectures, providing arguments which may be followed by anyone familiar with basic graph theory and algorithms. Thiswork may be applied to robotics and artificial intelligence as well as other fields, and will be especially useful to computer scientists working with computational and combinatorial geometry.},
	language = {English},
	publisher = {Oxford University Press},
	author = {O'Rourke, Joseph},
	month = oct,
	year = {1987}
}

@article{chvatal_combinatorial_1975,
	title = {A combinatorial theorem in plane geometry},
	volume = {18},
	issn = {0095-8956},
	url = {https://www.sciencedirect.com/science/article/pii/0095895675900611},
	doi = {10.1016/0095-8956(75)90061-1},
	language = {en},
	number = {1},
	urldate = {2021-04-23},
	journal = {Journal of Combinatorial Theory, Series B},
	author = {Chvátal, V},
	month = feb,
	year = {1975},
	pages = {39--41},
	file = {ScienceDirect Full Text PDF:/home/and/Zotero/storage/3KYX9E32/Chvátal - 1975 - A combinatorial theorem in plane geometry.pdf:application/pdf;ScienceDirect Snapshot:/home/and/Zotero/storage/FLWRNRTR/0095895675900611.html:text/html}
}

%% Parallel spatial joins
@inproceedings{challa_dd-rtree_2016,
	title = {{DD}-{Rtree}: {A} dynamic distributed data structure for efficient data distribution among cluster nodes for spatial data mining algorithms},
	shorttitle = {{DD}-{Rtree}},
	doi = {10.1109/BigData.2016.7840586},
	abstract = {Parallelizing data mining algorithms has become a necessity as we try to mine ever increasing volumes of data. Spatial data mining algorithms like Dbscan, Optics, Slink, etc. have been parallelized to exploit a cluster infrastructure. The efficiency achieved by existing algorithms can be attributed to spatial locality preservation using spatial indexing structures like k-d-tree, quad-tree, grid files, etc. for distributing data among cluster nodes. However, these indexing structures are static in nature, i.e., they need to scan the entire dataset to determine the partitioning coordinates. This results in high data distribution cost when the data size is large. In this paper, we propose a dynamic distributed data structure, DD-Rtree, which preserves spatial locality while distributing data across compute nodes in a shared nothing environment. Moreover, DD-Rtree is dynamic, i.e., it can be constructed incrementally making it useful for handling big data. We compare the quality of data distribution achieved by DD-Rtree with one of the recent distributed indexing structure, SD-Rtree. We also compare the efficiency of queries supported by these indexing structures along with the overall efficiency of DBSCAN algorithm. Our experimental results show that DD-Rtree achieves better data distribution and thereby resulting in improved overall efficiency.},
	booktitle = {2016 {IEEE} {International} {Conference} on {Big} {Data} ({Big} {Data})},
	author = {Challa, J. S. and Goyal, P. and Nikhil, S. and Mangla, A. and Balasubramaniam, S. S. and Goyal, N.},
	month = dec,
	year = {2016},
	keywords = {Algorithm design and analysis, Big Data, Big Data handling, cluster infrastructure, cluster nodes, Clustering algorithms, data distribution, data distribution quality, data mining, Data mining, data structures, Data structures, DBSCAN, DD-RTREE, density based clustering, Distributed databases, distributed indexing structure, dynamic distributed data structure, grid files, indexing, Indexing, k-d-tree, k-NN queries, neighborhood queries, OPTICS, pattern clustering, quadtree, SD-RTREE, SLINK, spatial data mining, spatial indexing structures, spatial locality, spatial locality preservation, tree data structures},
	publisher = {IEEE},
	address = {Washington, DC, USA},
	pages = {27--36},
	file = {IEEE Xplore Abstract Record:/home/and/Zotero/storage/Z54HZKTQ/7840586.html:text/html}
}

@inproceedings{franklin_data_2018,
	address = {New York, NY, USA},
	series = {{BigSpatial} 2018},
	title = {Data {Structures} for {Parallel} {Spatial} {Algorithms} on {Large} {Datasets} ({Vision} paper)},
	isbn = {978-1-4503-6041-8},
	url = {https://doi.org/10.1145/3282834.3282839},
	doi = {10.1145/3282834.3282839},
	abstract = {This paper describes data structures and algorithms for efficient implementation of GIS operations for large datasets on multicore Intel CPUs and on NVIDA GPUs. Typical operations are boolean combinations of polygons and map overlay. Efficient parallelization prefers simple regular data structures, such as structures of arrays of plain old datatypes. Warps of 32 threads are required to execute the same instruction (or be idle). Ideally, the data used by adjacent threads is adjacent in memory. Minimizing storage is important, as is accessing it in a regular pattern. That disparages pointers, linked lists, and trees. That implies that explicitly representing global topology is bad. If using only local topological formulae is sufficient, then it will be much faster. E.g., for many operations on a 2-D map (aka planar graph), the set of oriented edges suffices. Each edge knows the locations of its endpoints and the ids of its adjacent polygons. Any mass operation, such as area computation or point location, can be implemented as a map-reduce. All these techniques also apply in 3D to CAD/CAM and additive manufacturing. Indeed they are more important there.},
	urldate = {2021-03-08},
	booktitle = {Proceedings of the 7th {ACM} {SIGSPATIAL} {International} {Workshop} on {Analytics} for {Big} {Geospatial} {Data}},
	publisher = {Association for Computing Machinery},
	author = {Franklin, W. Randolph and de Magalhães, Salles Viana Gomes and Andrade, Marcus Vinícius Alvim},
	month = nov,
	year = {2018},
	keywords = {computational geometry, local topological formulae, map overlay, parallel computation},
	pages = {16--19},
	file = {Full Text PDF:/home/and/Zotero/storage/MCWXZ4KM/Franklin et al. - 2018 - Data Structures for Parallel Spatial Algorithms on.pdf:application/pdf}
}

@inproceedings{magalhaes_fast_2015,
	address = {New York, NY, USA},
	series = {{BigSpatial}'15},
	title = {Fast exact parallel map overlay using a two-level uniform grid},
	isbn = {978-1-4503-3974-2},
	url = {https://doi.org/10.1145/2835185.2835188},
	doi = {10.1145/2835185.2835188},
	abstract = {We present EPUG-Overlay (Exact Parallel Uniform Grid Overlay), an algorithm to overlay two maps that is fast and parallel, has no roundoff errors, and is freely available. EPUG-Overlay combines several novel aspects. It represents coordinates with rational numbers, thereby ensuring exact computations with no roundoff errors and the ensuing sliver problems and topological impossibilities. For efficiency, EPUG-Overlay performs the map overlay in parallel, thereby utilizing the ubiquitous multicore architecture. Our application goes beyond merely using existing packages, which are inefficient when used in parallel on large problems. Indeed, overlaying two maps with 53,000,000 edges and 730,000 faces took only 322 elapsed seconds (plus 116 seconds for I/O) on a dual 8-core 3.1 GHz Intel Xeon E5-2687 workstation. In contrast, GRASS, executing sequentially and generating roundoff errors, takes 5300 seconds. The overlay operation combines two input maps (planar graphs) containing faces (polygons) separated by polyline edges (chains), into a new map, each of whose faces is the intersection of one face from each input map. Floating point roundoff errors can cause an edge intersection to be missed or the computed intersection point be in a wrong face, leading to a topological inconsistency. Thus, a program might fail to compute a valid output map at all, using any amount of time. This gets worse when the inputs are bigger or have slivers. Heuristics can ameliorate this problem, but only to an extent. By representing each coordinate as a vulgar fraction, with multiprecision numerator and denominator, the computation is exact. EPUG-Overlay also executes various useful subproblems very quickly, such as locating a set of points in a planar graph and finding all the intersections among a large set of small edges. EPUG-Overlay is built on our earlier sequential floating-point algorithm that found the areas of the overlay polygons, without finding the polygons themselves.},
	urldate = {2021-03-08},
	booktitle = {Proceedings of the 4th {International} {ACM} {SIGSPATIAL} {Workshop} on {Analytics} for {Big} {Geospatial} {Data}},
	publisher = {Association for Computing Machinery},
	author = {Magalhães, Salles V. G. and Andrade, Marcus V. A. and Franklin, W. Randolph and Li, Wenli},
	month = nov,
	year = {2015},
	keywords = {Big Data, Exact Computation, Map Overlay, Parallel algorithm},
	pages = {45--54},
	file = {Full Text PDF:/home/and/Zotero/storage/4ZGLT4Z9/Magalhães et al. - 2015 - Fast exact parallel map overlay using a two-level .pdf:application/pdf}
}

@inproceedings{puri_mapreduce_2013,
	title = {{MapReduce} {Algorithms} for {GIS} {Polygonal} {Overlay} {Processing}},
	doi = {10.1109/IPDPSW.2013.254},
	abstract = {Polygon overlay is one of the complex operations in computational geometry. It is applied in many fields such as Geographic Information Systems (GIS), computer graphics and VLSI CAD. Sequential algorithms for this problem are in abundance in literature but there is a lack of distributed algorithms especially for MapReduce platform. In GIS, spatial data files tend to be large in size (in GBs) and the underlying overlay computation is highly irregular and compute intensive. The MapReduce paradigm is now standard in industry and academia for processing large-scale data. Motivated by the MapReduce programming model, we revisit the distributed polygon overlay problem and its implementation on MapReduce platform. Our algorithms are geared towards maximizing local processing and minimizing the communication overhead inherent with shuffle and sort phases in MapReduce. We have experimented with two data sets and achieved up to 22x speedup with dataset 1 using 64 CPU cores.},
	booktitle = {2013 {IEEE} {International} {Symposium} on {Parallel} {Distributed} {Processing}, {Workshops} and {Phd} {Forum}},
	author = {Puri, S. and Agarwal, D. and He, X. and Prasad, S. K.},
	month = may,
	year = {2013},
	keywords = {Algorithm design and analysis, Cloud Computing, communication overhead minimization, computational geometry, computer graphics, CPU cores, data handling, Data structures, distributed algorithms, distributed polygon overlay problem, geographic information systems, Geographic information systems, GIS, GIS polygonal overlay processing, large-scale data processing, Libraries, local processing maximization, MapReduce, MapReduce algorithms, MapReduce platform, MapReduce programming model, parallel algorithms, Partitioning algorithms, Polygon Overlay, Sequential algorithms, shuffle phases, sort phases, spatial data files, Spatial databases, Vectors, VLSI CAD},
	pages = {1009--1016},
	publisher = {IEEE},
	address = {Washington, DC, USA},	
	file = {IEEE Xplore Abstract Record:/home/and/Zotero/storage/7KF5J55H/6650985.html:text/html}
}

@inproceedings{sabek_spatial_2017,
	address = {New York, NY, USA},
	series = {{SIGSPATIAL} '17},
	title = {On {Spatial} {Joins} in {MapReduce}},
	isbn = {978-1-4503-5490-5},
	url = {https://doi.org/10.1145/3139958.3139967},
	doi = {10.1145/3139958.3139967},
	abstract = {This paper provides the first attempt for a full-fledged query optimizer for MapReduce-based spatial join algorithms. The optimizer develops its own taxonomy that covers almost all possible ways of doing a spatial join for any two input datasets. The optimizer comes in two flavors; cost-based and rule-based. Given two input data sets, the cost-based query optimizer evaluates the costs of all possible options in the developed taxonomy, and selects the one with the lowest cost. The rule-based query optimizer abstracts the developed cost models of the cost-based optimizer into a set of simple easy-to-check heuristic rules. Then, it applies its rules to select the lowest cost option. Both query optimizers are deployed and experimentally evaluated inside a widely used open-source MapReduce-based big spatial data system. Exhaustive experiments show that both query optimizers are always successful in taking the right decision for spatially joining any two datasets of up to 500GB each.},
	urldate = {2021-03-08},
	booktitle = {Proceedings of the 25th {ACM} {SIGSPATIAL} {International} {Conference} on {Advances} in {Geographic} {Information} {Systems}},
	publisher = {Association for Computing Machinery},
	author = {Sabek, Ibrahim and Mokbel, Mohamed F.},
	month = nov,
	year = {2017},
	keywords = {Hadoop, MapReduce, Query Optimization, Spatial Join},
	pages = {1--10},
	file = {Full Text PDF:/home/and/Zotero/storage/WUPF7SUD/Sabek and Mokbel - 2017 - On Spatial Joins in MapReduce.pdf:application/pdf}
}

@article{li_scalable_2019,
	title = {Scalable computational geometry in {MapReduce}},
	issn = {0949-877X},
	url = {https://doi.org/10.1007/s00778-018-0534-5},
	doi = {10.1007/s00778-018-0534-5},
	abstract = {Hadoop, employing the MapReduce programming paradigm, has been widely accepted as the standard framework for analyzing big data in distributed environments. Unfortunately, this rich framework has not been exploited for processing large-scale computational geometry operations. This paper introduces CG\_Hadoop; a suite of scalable and efficient MapReduce algorithms for various fundamental computational geometry operations, namely polygon union, Voronoi diagram, skyline, convex hull, farthest pair, and closest pair, which present a set of key components for other geometric algorithms. For each computational geometry operation, CG\_Hadoop has two versions, one for the Apache Hadoop system and one for the SpatialHadoop system, a Hadoop-based system that is more suited for spatial operations. These proposed algorithms form the nucleus of a comprehensive MapReduce library of computational geometry operations. Extensive experimental results run on a cluster of 25 machines over datasets of size up to 3.8B records show that CG\_Hadoop achieves up to 14x and 115x better performance than traditional algorithms when using Hadoop and SpatialHadoop systems, respectively.},
	language = {en},
	urldate = {2019-06-26},
	journal = {The VLDB Journal},
	number = {1},
	volume = {28},
	pages = {523–548},
	author = {Li, Yuan and Eldawy, Ahmed and Xue, Jie and Knorozova, Nadezda and Mokbel, Mohamed F. and Janardan, Ravi},
	month = jan,
	year = {2019},
	keywords = {Computational Geometry, MapReduce, Hadoop, Distributed Systems, Output-sensitive Algorithms},
	file = {Li et al. - 2019 - Scalable computational geometry in MapReduce.pdf:/home/and/Zotero/storage/RD4LUCPG/Li et al. - 2019 - Scalable computational geometry in MapReduce.pdf:application/pdf}
}

@article{zhou_parallel_2018,
	title = {A parallel method to accelerate spatial operations involving polygon intersections},
	volume = {32},
	issn = {1365-8816},
	url = {https://doi.org/10.1080/13658816.2018.1508689},
	doi = {10.1080/13658816.2018.1508689},
	abstract = {Polygon intersection is an important spatial data-handling process, on which many spatial operations are based. However, this process is computationally intensive because it involves the detection and calculation of polygon intersections. We addressed this computation issue based on two perspectives. First, we improved a method called boundary algebra filling to efficiently rasterize the input polygons. Polygon intersections were subsequently detected in the cells of the raster. Owing to the use of a raster data structure, this method offers advantages of reduced task dependence and improved performance. Based on this method, we developed parallel strategies for different procedures in terms of workload decomposition and task scheduling. Thus, the workload across different parallel processes can be balanced. The results suggest that our method can effectively accelerate the process of polygon intersection. When addressing datasets with 1,409,020 groups of overlapping polygons, our method could reduce the total execution time from 987.82 to 53.66 s, thereby obtaining an optimal speedup ratio of 18.41 while consistently balancing the workloads. We also tested the effect of task scheduling on the parallel efficiency, showing that reducing the total runtime is effective, especially for a lower number of processes. Finally, the good scalability of the method is demonstrated.},
	number = {12},
	urldate = {2021-03-08},
	journal = {International Journal of Geographical Information Science},
	author = {Zhou, Chen and Chen, Zhenjie and Li, Manchun},
	month = dec,
	year = {2018},
	note = {Publisher: Taylor \& Francis
\_eprint: https://doi.org/10.1080/13658816.2018.1508689},
	keywords = {boundary algebra filling, parallel computing, Polygon intersection, workload balance},
	pages = {2402--2426},
	file = {Full Text PDF:/home/and/Zotero/storage/LXVQTHVW/Zhou et al. - 2018 - A parallel method to accelerate spatial operations.pdf:application/pdf;Snapshot:/home/and/Zotero/storage/9EPJIQ8F/13658816.2018.html:text/html}
}

@inproceedings{puri_efficient_2013,
	title = {Efficient {Parallel} and {Distributed} {Algorithms} for {GIS} {Polygonal} {Overlay} {Processing}},
	doi = {10.1109/IPDPSW.2013.174},
	abstract = {Polygon overlay is one of the complex operations in Geographic Information Systems (GIS). In GIS, a typical polygon tends to be large in size often consisting of thousands of vertices. Sequential algorithms for this problem are in abundance in literature and most of the parallel algorithms concentrate on parallelizing edge intersection phase only. Our research aims to develop parallel algorithms to find overlay for two input polygons which can be extended to handle multiple polygons and implement it on General Purpose Graphics Processing Units (GPGPU) which offers massive parallelism at relatively low cost. Moreover, spatial data files tend to be large in size (in GBs) and the underlying overlay computation is highly irregular and compute intensive. MapReduce paradigm is now standard in industry and academia for processing large-scale data. Motivated by MapReduce programming model, we propose to develop and implement scalable distributed algorithms to solve large-scale overlay processing in this dissertation.},
	booktitle = {2013 {IEEE} {International} {Symposium} on {Parallel} {Distributed} {Processing}, {Workshops} and {Phd} {Forum}},
	author = {Puri, S. and Prasad, S. K.},
	month = may,
	year = {2013},
	keywords = {Computer architecture, distributed, distributed algorithms, edge intersection, general purpose graphics processing units, geographic information systems, Geographic information systems, GIS polygonal overlay processing, GPGPU, graphics processing units, Graphics processing units, Instruction sets, MapReduce, MapReduce paradigm, overlay computation, parallel, parallel algorithms, Parallel algorithms, Partitioning algorithms, polygon overlay, PRAM, sequential algorithms},
	pages = {2238--2241},
	publisher = {IEEE},
	address = {Washington, DC, USA},
	file = {IEEE Xplore Abstract Record:/home/and/Zotero/storage/4R6FNSXE/6651139.html:text/html}
}

%% CGAL
@book{fogel_cgal_2012,
	title = {{CGAL} {Arrangements} and {Their} {Applications}: {A} {Step}-by-{Step} {Guide}},
	isbn = {978-3-642-17283-0},
	shorttitle = {{CGAL} {Arrangements} and {Their} {Applications}},
	abstract = {Arrangements of curves constitute fundamental structures that have been intensively studied in computational geometry. Arrangements have numerous applications in a wide range of areas – examples include geographic information systems, robot motion planning, statistics, computer-assisted surgery and molecular biology. Implementing robust algorithms for arrangements is a notoriously difficult task, and the CGAL arrangements package is the first robust, comprehensive, generic and efficient implementation of data structures and algorithms for arrangements of curves. This book is about how to use CGAL two-dimensional arrangements to solve problems. The authors first demonstrate the features of the arrangement package and related packages using small example programs. They then describe applications, i.e., complete standalone programs written on top of CGAL arrangements used to solve meaningful problems – for example, finding the minimum-area triangle defined by a set of points, planning the motion of a polygon translating among polygons in the plane, computing the offset polygon, finding the largest common point sets under approximate congruence, constructing the farthest-point Voronoi diagram, coordinating the motion of two discs moving among obstacles in the plane, and performing Boolean operations on curved polygons. The book contains comprehensive explanations of the solution programs, many illustrations, and detailed notes on further reading, and it is supported by a website that contains downloadable software and exercises. It will be suitable for graduate students and researchers involved in applied research in computational geometry, and for professionals who require worked-out solutions to real-life geometric problems. It is assumed that the reader is familiar with the C++ programming-language and with the basics of the generic-programming paradigm.},
	language = {en},
	publisher = {Springer Science \& Business Media},
	address = {Berlin/Heidelberg, Germany},
	author = {Fogel, Efi and Halperin, Dan and Wein, Ron},
	month = jan,
	year = {2012},
	note = {Google-Books-ID: u0CONtnwi9YC},
	keywords = {Computers / Computer Vision \& Pattern Recognition, Computers / Software Development \& Engineering / General, Mathematics / Applied, Mathematics / Geometry / General},
	file = {CGAL.pdf:/home/and/MEGAsync/eBooks/CGAL.pdf:application/pdf}
}

@article{flato_design_2001,
	title = {The design and implementation of panar maps in {CGAL}},
	volume = {5},
	issn = {1084-6654},
	url = {https://doi.org/10.1145/351827.384255},
	doi = {10.1145/351827.384255},
	abstract = {Planar maps are fundamental structures in computational geometry. They are used to represent the subdivision of the plane into regions and have numerous applications. We describe the planar map package of CGAL--a Computational Geometry Algorithms Library. We discuss its modular design and implementation. In particular we introduce the two main classes of the design--planar maps and topological maps that enable the convenient separation between geometry and topology. The modular design is implemented using a generic programming approach. By switching a template parameter--the geometric traits class, one can use the same code for planar maps of different objects such as line segments or circular arcs. More flexibility is achieved by choosing a point location algorithm out of three implemented algorithms or plugging in an algorithm implemented by the user. The user of the planar maps package can benefit both from its flexibility and robustness. We present several examples of geometric traits classes and point location algorithms which demonstrate the possibility to adapt the general package to specific needs.},
	urldate = {2021-02-20},
	journal = {ACM Journal of Experimental Algorithmics},
	author = {Flato, Eyal and Halperin, Dan and Hanniel, Iddo and Nechushtan, Oren and Ezra, Eti},
	month = dec,
	year = {2001},
	pages = {13--es},
	file = {Full Text PDF:/home/and/Zotero/storage/78RY4B4L/Flato et al. - 2001 - The design and implementation of panar maps in CGA.pdf:application/pdf}
}

@misc{haran_experimental_2009,
	title = {An experimental study of point location in planar arrangements in {CGAL}},
	url = {https://doi.org/10.1145/1412228.1412237},
	abstract = {We study the performance in practice of various point-location algorithms implemented in CGAL (the Computational Geometry Algorithms Library), including a newly devised landmarks algorithm. Among the other algorithms studied are: a naïve approach, a “walk along a line” strategy, and a trapezoidal decomposition-based search structure. The current implementation addresses general arrangements of planar curves, including arrangements of nonlinear segments (e.g., conic arcs) and allows for degenerate input (for example, more than two curves intersecting in a single point or overlapping curves). The algorithms use exact geometric computation and thus result in the correct point location. In our landmarks algorithm (a.k.a. jump \& walk), special points, “landmarks,” are chosen in a preprocessing stage, their place in the arrangement is found, and they are inserted into a data structure that enables efficient nearest-neighbor search. Given a query point, the nearest landmark is located and a “walk” strategy is applied from the landmark to the query point. We report on various experiments with arrangements composed of line segments or conic arcs. The results indicate that compared to the other algorithms tested, the landmarks approach is the most efficient, when the overall (amortized) cost of a query is taken into account, combining both preprocessing and query time. The simplicity of the algorithm enables an almost straightforward implementation and rather easy maintenance. The generic programming implementation allows versatility both in the selected type of landmarks and in the choice of the nearest-neighbor search structure. The end result is an efficient point-location algorithm that bypasses the alternative CGAL implementations in most practical aspects.},
	urldate = {2020-04-15},
	publisher = {Association for Computing Machinery},
	author = {Haran, Idit and Halperin, Dan},
	month = feb,
	year = {2009},
	keywords = {arrangements, CGAL, computational geometry, generic programming, Point location},
	file = {Full Text PDF:/home/and/Zotero/storage/XKPPS34L/Haran and Halperin - 2009 - An experimental study of point location in planar .pdf:application/pdf}
}

@article{wein_advanced_2007,
	title = {Advanced programming techniques applied to {Cgal}'s arrangement package},
	volume = {38},
	issn = {09257721},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0925772107000077},
	doi = {10.1016/j.comgeo.2006.11.007},
	abstract = {Arrangements of planar curves are fundamental structures in computational geometry. Recently, the arrangement package of Cgal, the Computational Geometry Algorithms Library, has been redesigned and re-implemented exploiting several advanced programming techniques. The resulting software package, which constructs and maintains planar arrangements, is easier to use, to extend, and to adapt to a variety of applications, is more eﬃcient space- and timewise, and is more robust. The implementation is complete in the sense that it handles degenerate input, and it produces exact results. In this paper we describe how various programming techniques were used to accomplish speciﬁc tasks within the context of Computational Geometry in general and Arrangements in particular. A large set of benchmarks assured the successful applications of the adverted programming techniques. The results of a small sample are reported at the end of this article.},
	language = {en},
	number = {1-2},
	urldate = {2020-04-15},
	journal = {Computational Geometry},
	author = {Wein, Ron and Fogel, Efi and Zukerman, Baruch and Halperin, Dan},
	month = sep,
	year = {2007},
	pages = {37--63},
	file = {Wein et al. - 2007 - Advanced programming techniques applied to Cgal's .pdf:/home/and/Zotero/storage/6ILWQJ6E/Wein et al. - 2007 - Advanced programming techniques applied to Cgal's .pdf:application/pdf}
}

%% LEDA
@article{mehlhorn_leda_1995,
	title = {{LEDA}: a platform for combinatorial and geometric computing},
	volume = {38},
	issn = {0001-0782},
	shorttitle = {{LEDA}},
	url = {https://doi.org/10.1145/204865.204889},
	doi = {10.1145/204865.204889},
	abstract = {Combinatorial and geometric computing is a core area of computer science (CS). In fact, most CS curricula contain a course in data structures and algorithms. The area deals with objects such as graphs, sequences, dictionaries, trees, shortest paths, flows, matchings, points, segments, lines, convex hulls, and Voronoi diagrams and forms the basis for application areas such as discrete optimization, scheduling, traffic control, CAD, and graphics. There is no standard library of the data structures and algorithms of combinatorial and geometric computing. This is in sharp contrast to many other areas of computing. There are, for example, packages in statistics (SPSS), numerical analysis (LINPACK, EISPACK), symbolic computation (MAPLE, MATHEMATICA), and linear programming (CPLEX).},
	number = {1},
	urldate = {2021-02-21},
	journal = {Communications of the ACM},
	author = {Mehlhorn, Kurt and Näher, Stefan},
	month = jan,
	year = {1995},
	pages = {96--102},
	file = {Full Text PDF:/home/and/Zotero/storage/PWN2LC9Z/Mehlhorn and Näher - 1995 - LEDA a platform for combinatorial and geometric c.pdf:application/pdf}
}